#!/usr/bin/env python3
"""Combine runs from different output files.
"""
import argparse
import a5py.ascot5io.coreio.tools as a5tools
from a5py import Ascot

notesandexamples = """
notes:
  This tool is usually used ("add" mode) to replace MPI_GATHER if the code was
  run in several nodes but with MPI=0. However, it can also be used to gather
  e.g. results of an parameter scan where single input file was used but the
  simulations were run simultaneously and stored in separate files (use "madd"
  mode). Finally, this can be used to combine runs if you first ran a simulation
  where markers hit CPU time limit, and then you continued that simulation by
  running a second simulation for those markers using their endstates. Mode
  "continue" combines the results so that e.g. distributions are for the whole
  simulation.

examples:

  a5combine -a input.h5 output_000001.h5 output_000002.h5 ...
  a5combine -m input.h5 run1.h5 run2.h5 ...
  a5combine -c firstrun.h5 secondrun.h5
"""

parser = argparse.ArgumentParser(
    description="Combine simulation outputs from different files.",
    epilog=notesandexamples,
    formatter_class=argparse.RawDescriptionHelpFormatter)
parser.add_argument("INPUT", help="File for storing the combined output")
parser.add_argument("FILES", help="Files from where the output is collected",
                    nargs="*")
parser.add_argument("-a", "--add", action="store_true", dest="add",
                    default=False,
                    help="Combine outputs from a single run split to FILES to "
                    + "INPUT")
parser.add_argument("-m", "--madd", action="store_true", dest="madd",
                    default=False, help="Combine several independent runs from "
                    "FILES to INPUT")
parser.add_argument("-c", "--continue", action="store_true", dest="cont",
                    default=False,
                    help="Combine simulation in FILE to INPUT assuming it "
                    "continues the simulation from INPUT")
args = parser.parse_args()
opt = sum([args.add, args.madd, args.cont])
if opt == 0:
    print("a5manage: error: provide one of the -a, -m, -c options")
    exit()
if opt > 1:
    print("a5manage: error: only one of the -a, -m, -c options can be used at "
          + "a time")
    exit()
if args.cont and len(args.FILES) > 1:
    print("a5manage: error: provide only a single FILE when using --continue.")
    exit()

if args.add:
    for i, f in enumerate(args.FILES):
        print("a5combine: combining %s to %s" % (f, args.INPUT))
        if i == 0:
            # Copy the first run
            group = a5tools.call_fileapi(f, "get_activeqid", "results")
            group = a5tools.copygroup(f, args.INPUT, group, newgroup=True)
            a5tools.call_fileapi(args.INPUT, "set_active", group)
            continue
        a5tools.combineoutput(args.INPUT, f, add=True)
    print("a5combine: done")
    exit()

if args.madd:
    for i, f in enumerate(args.FILES):
        print("a5combine: combining %s to %s" % (f, args.INPUT))
        group = a5tools.call_fileapi(f, "get_activeqid", "results")
        a5tools.copygroup(f, args.INPUT, group, newgroup=False)
        group0 = a5tools.call_fileapi(args.INPUT, "get_activeqid", "results")
    print("a5combine: done")
    exit()

if args.cont:
    print("a5combine: combining %s to %s" % (args.FILES[0], args.INPUT))
    a5tools.combineoutput(args.INPUT, args.FILES[0], add=False)
    print("a5combine: done")
    exit()
