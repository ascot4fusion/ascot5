#!/usr/bin/env python3

import sys
import os.path
import h5py
import numpy as np
from prompt_toolkit import PromptSession, HTML
from prompt_toolkit import print_formatted_text as print
from prompt_toolkit.completion import WordCompleter, Completer, Completion

# Column width
column_width = 25

# TODO complete hdf5 paths with subgroups etc.
# TODO completer does not work for empty strings for some reason
class H5Completer(Completer):
    group_commands = ['cd', 'c', 'ls', 'l', 'set', 's']
    dataset_commands = ['ls', 'l', 'print', 'p']
    common_commands = ['help', 'h', 'quit', 'q']
    commands = list(sorted(set(group_commands + dataset_commands + common_commands)))
    common_groups = ['.', '..',  '/', 'a']

    def __init__(self, h5file, current_group):
        self.h5file = h5file
        self.current_group = current_group

    def set_completions(self, h5file, current_group):
        self.h5file = h5file
        self.current_group = current_group

    def get_completions(self, document, complete_event):
        word = document.get_word_before_cursor(WORD=True).strip().lower()
        word_length = len(word)
        line = document.text_before_cursor
        line_length = len(line)
        line = line.split()
        if len(line) == 0:
            for command in self.commands:
                yield Completion(command, start_position=0)
        elif len(line) <= 1 and word_length == line_length:
            for command in self.commands:
                if word == command[:word_length]:
                    yield Completion(command, start_position=-word_length)
        else:
            command = line[0]
            # Suggest a path from the HDF5 file
            if len(line) == 1: # Suggest from current group
                path = self.current_group
            elif line[1][0] == '/': # Take the full written path as base
                path = line[1]
            else: # Concatenate the written path to the current group
                path = self.current_group + '/' + line[1]
            # Remove trailing junk to produce valid hdf5 path
            path = get_complete_path(self.h5file, self.current_group, path)
            (groups, datasets) = get_groups_datasets(self.h5file, path)
            groups = groups + self.common_groups
            if len(line) == 1:
                last_word = ''
            else:
                last_word = line[-1].split('/')[-1]
            if command in self.dataset_commands:
                for dataset in datasets:
                    if last_word in dataset:
                        yield Completion(dataset, start_position=-len(last_word))
            if command in self.group_commands:
                for group in groups:
                    if last_word in group:
                        yield Completion(group, start_position=-len(last_word))

def get_complete_path(h5file, current_path, pathstr):
    path = pathstr.split('/')
    if not path[-1]:
        return pathstr
    if not path[0]:
        basepath = '/'
    else:
        basepath = current_path
    complete_path = basepath
    for part in path:
        if part == '':
            continue
        else:
            if (complete_path + '/' + part) in h5file:
                complete_path += '/' + part
            else:
                break
    return complete_path

def get_active_group(h5file, group):
    qid_active = h5file[group].attrs["active"].decode()
    for groupname in h5file[group]:
        if groupname[-10:] == qid_active:
            return groupname

def set_active_group(h5file, group):
    qid = group[-10:].encode('utf-8')
    h5file[group].parent.attrs["active"] = np.string_(qid)

def get_groups_datasets(h5file, path):
    groups = []
    datasets = []
    if isinstance(h5file[path], h5py.Group):
        for item in h5file[path].keys():
            if isinstance(h5file[path][item], h5py.Group):
                groups.append(item)
            elif isinstance(h5file[path][item], h5py.Dataset):
                datasets.append(item)
    return (groups, datasets)

def print_group(name, isactive):
    if isactive:
        print(HTML('<b>' + name.ljust(column_width) + 'Group ' + '</b>'))
    else:
        print(name.ljust(column_width) + 'Group ')

def print_dataset(name, shape):
    shapestr = '{' + ', '.join(map(str,shape)) + '}'
    print(name.ljust(column_width) + 'Dataset ' + shapestr)

def main():
    helptxt = """
    Commands:
    cd    (c)     Go to group
    ls    (l)     List group contents. The active group is shown in <b>bold</b>.
    print (p)     Print dataset contents
    set   (s)     Set dataset as active
    help  (h)     Print this help message
    quit  (q)     Exit the program

    Arguments:
    . .. /        Work as in Unix shell
    a             Perform command for <b>active</b> field
    """

    try:
        fname = sys.argv[1]
    except IndexError:
        fname = "ascot.h5"
    if not os.path.isfile(fname):
        print("File", fname, "does not exist.")
        quit()
    with h5py.File(fname, 'a') as h5file:
        current_group = '/'
        session = PromptSession(completer=H5Completer(h5file, current_group))

        while True:
            try:
                # Update autocompleter
                session.completer.set_completions(h5file, current_group);
                user_input = session.prompt('> ')
                user_input = user_input.split()
                # Construct path if more than one string in input
                if len(user_input) == 0:
                    continue
                elif len(user_input) == 1:
                    command = user_input[0]
                    path = current_group
                else:
                    command = user_input[0]
                    # Special input characters
                    if user_input[1] == '.':
                        path = current_group;
                    elif user_input[1] == '..':
                        path = h5file[current_group].parent.name
                    elif user_input[1] == '/':
                        path = '/'
                    elif user_input[1] == 'a':
                        if 'active' in h5file[current_group].attrs:
                            active = get_active_group(h5file, current_group)
                            path = '/'.join([current_group, active])
                        else:
                            print('No attribute "active" in group ' + current_group)
                            continue
                    else:
                        # Process normal hdf5 path
                        if current_group == '/':
                            path = '/' + user_input[1]
                        else:
                            if user_input[1][0] == '/':
                                path = user_input[1]
                            else:
                                path = '/'.join([current_group, user_input[1]])
                        if path not in h5file:
                            print('"' + path + '" is not a valid group or dataset')
                            continue
            # Exception handling
            except KeyboardInterrupt:
                continue
            except EOFError:
                break
            else:
                # Process the user input
                if command == 'cd' or command == 'c':
                    if isinstance(h5file[path], h5py.Group):
                        current_group = path
                    else:
                        print('"' + path + '" is not a group')

                elif command == 'ls' or command == 'l':
                    if isinstance(h5file[path], h5py.Group):
                        (groups, datasets) =  get_groups_datasets(h5file, path)
                        active = ''
                        if 'active' in h5file[path].attrs:
                            # Display a marker next to the active field
                            active = get_active_group(h5file, path)
                        for groupname in groups:
                            print_group(groupname, groupname == active)
                        for datasetname in datasets:
                            print_dataset(datasetname, h5file[path][datasetname].shape)
                    elif isinstance(h5file[path], h5py.Dataset):
                        print_dataset(path.split('/')[-1], h5file[path].shape)

                elif command == 'print' or command == 'p':
                    if isinstance(h5file[path], h5py.Group):
                        print('"' + path + '" is a group')
                    elif isinstance(h5file[path], h5py.Dataset):
                        print(h5file[path][:])

                elif command == 'set' or command == 's':
                    if isinstance(h5file[path], h5py.Group):
                        if 'active' in h5file[path].parent.attrs:
                            set_active_group(h5file, path)
                        else:
                            print('No attribute "active" in group ' + h5file[path].parent.name)
                    elif isinstance(h5file[path], h5py.Dataset):
                        print('"' + path + '" is not a group')

                elif command == 'help' or command == 'h':
                    print(HTML(helptxt))

                elif command == 'quit' or command == 'q':
                    break

                else:
                    print('Unrecognized command "' + command + '"')
                    print(HTML(helptxt))

if __name__ == '__main__':
    main()
