#!/usr/bin/env python3


import a5py.ascot5io.options     as options
import a5py.ascot5io.ascot5      as ascot5
import a5py.ascot5io.ascot5tools as tools
import numpy as np
import os
import subprocess
import sys
import tempfile

if "-r" in sys.argv:
    sys.argv.remove("-r")
    removeOld = True
else:
    removeOld = False

if len(sys.argv) > 1:
    fn = sys.argv[1]
else:
    fn = "ascot.h5"

try:
    qid = tools.call_ascot5file(fn, "get_activeqid", "options")
except ValueError:

    while True:
        makeopt = input("Options does not exist. Make one? (y/n): ")

        if makeopt == "y":
            opt = options.generateopt()
            options.write_hdf5(fn, opt)
            break

        if makeopt == "n":
            exit()

qid = tools.call_ascot5file(fn, "get_activeqid", "options")
opt, info = options.read_hdf5(fn, qid, True)
opt.pop('qid')
opt.pop('date')
opt.pop('description')

def trim(val):
    if np.abs(val) >= 1e4 or (np.abs(val) <=1e-4 and val != 0):
        return "{0:e}".format(val)
    else:
        return "{0:g}".format(val)

t = ""
for i in info:
    if len(i) == 1:
        t = "\n" + t + i[0] + "\n\n"
        continue

    k = i[0]
    d = i[1]
    v = opt[k]
    t = t + d
    if(len(v) == 1):
        t = t + k + "=" + trim(v[0]) + "\n\n"
    elif(len(v) > 1):
        t = t + k + "=" \
            + ",".join([trim(vv) for vv in v]) \
            + "\n\n"

# Remove empty lines from beginning and end
t = t[5:-2]

f,tmpfn = tempfile.mkstemp()
f=os.fdopen(f,'w')
f.write(t)
f.close()

# Get default text editor, use -nw for emacs
ed=os.environ.get('EDITOR','vim')
if "emacs" in ed:
    subprocess.call([ed,"-nw",tmpfn])
else:
    subprocess.call([ed,tmpfn])

f=open(tmpfn)
lines=f.readlines()
f.close()
os.remove(tmpfn)

opt.clear()
for line in lines:
    if not line.strip() or line[0] == "#":
        continue

    p = line.split("=")
    if(len(p)==2):
        opt[p[0].strip()] = np.fromstring(p[1].strip(),sep=",")

desc = input("Give description"
             + " (leave empty if you don't want to save changes):\n")

if len(desc) == 0:
    print("Options closed")
else:
    group = options.write_hdf5(fn, opt, desc=desc)

    if removeOld:
        oldqid = tools.call_ascot5file(fn, "get_activeqid", "options")
        tools.removegroup(fn, "opt_" + oldqid)

    tools.call_ascot5file(fn, "set_active", group)
    print("Options set and set as active.")
